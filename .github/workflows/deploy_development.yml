name: Deploy Development

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

jobs:

  checkout_repository:
    name: Checkout Repository
    runs-on: develop
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

  create_env_file:
    needs: [ checkout_repository ]
    name: Create Environment File
    environment: development
    runs-on: develop
    steps:
      - name: Create Environment File
        run: touch coin_library.env

      - name: Add DB User
        env:
          MARIADB_USER: ${{ secrets.MARIADB_USER }}
        run: echo "MARIADB_USER=$MARIADB_USER" >> coin_library.env

      - name: Add DB Password
        env:
          MARIADB_PASSWORD: ${{ secrets.MARIADB_PASSWORD }}
        run: echo "MARIADB_PASSWORD=$MARIADB_PASSWORD" >> coin_library.env

      - name: Add DB Root Password
        env:
          MARIADB_ROOT_PASSWORD: ${{ secrets.MARIADB_ROOT_PASSWORD }}
        run: echo "MARIADB_ROOT_PASSWORD=$MARIADB_ROOT_PASSWORD" >> coin_library.env

      - name: Add API URL
        env:
          API_URL: ${{ secrets.API_URL }}
        run: echo "API_URL=$API_URL" >> coin_library.env

      - name: Add API PORT
        env:
          API_PORT: ${{ secrets.API_PORT }}
        run: echo "API_PORT=$API_PORT" >> coin_library.env

      - name: Add DB Database
        env:
          MARIADB_DATABASE: ${{ secrets.MARIADB_DATABASE }}
        run: echo "MARIADB_DATABASE=$MARIADB_DATABASE" >> coin_library.env

      - name: Add DATABASE MOUNT
        env:
          DATABASE_MOUNT: ${{ secrets.DATABASE_MOUNT }}
        run: echo "DATABASE_MOUNT=$DATABASE_MOUNT" >> coin_library.env

      - name: Add PROXY NETWORK
        env:
          PROXY_NETWORK: ${{ secrets.PROXY_NETWORK }}
        run: echo "PROXY_NETWORK=$PROXY_NETWORK" >> coin_library.env

      - name: Add SPRING USERNAME
        env:
          SPRING_USERNAME: ${{ secrets.SPRING_USERNAME }}
        run: echo "SPRING_USERNAME=$SPRING_USERNAME" >> coin_library.env

      - name: Add SPRING PASSWORD
        env:
          SPRING_PASSWORD: ${{ secrets.SPRING_PASSWORD }}
        run: echo "SPRING_PASSWORD=$SPRING_PASSWORD" >> coin_library.env

      - name: Add FRONTEND URL
        env:
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        run: echo "FRONTEND_URL=$FRONTEND_URL" >> coin_library.env

      - name: Create DATABASE MOUNT
        env:
          DATABASE_MOUNT: ${{ secrets.DATABASE_MOUNT }}
        run: mkdir -p $DATABASE_MOUNT/data && mkdir -p $DATABASE_MOUNT/conf

      - name: Add GOOGLE ClIENT ID
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        run: echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" >> coin_library.env

      - name: Add DOCKERHUB USER
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
        run: echo "DOCKERHUB_USER=$DOCKERHUB_USER" >> coin_library.env

      - name: ADD Environment
        env:
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
        run: echo "ENVIRONMENT=$ENVIRONMENT" >> coin_library.env

  build_backend:
    name: Build And Push Backend
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Backend Docker Container
        uses: docker/build-push-action@v2
        with:
          platforms: linux/arm64,linux/amd64
          file: ./backend.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/dcl_backend:${{ secrets.ENVIRONMENT }}

  build_frontend:
    name: Build And Push Frontend
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Frontend Docker Container
        uses: docker/build-push-action@v2
        with:
          platforms: linux/arm64,linux/amd64
          file: ./frontend.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/dcl_frontend:${{ secrets.ENVIRONMENT }}
          build-args: |
            API_URL=${{ secrets.API_URL }}
            API_PORT=${{ secrets.API_PORT }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}

  run_application:
    needs: [ build_backend, build_frontend, create_env_file ]
    name: Run Application
    environment: development
    runs-on: develop
    steps:
      - name: Pull Frontend Docker Container
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
        run: docker pull $DOCKERHUB_USER/dcl_frontend:$ENVIRONMENT

      - name: Pull Backend Docker Container
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
        run: docker pull $DOCKERHUB_USER/dcl_backend:$ENVIRONMENT

      - name: Run Application
        run: docker-compose --env-file coin_library.env -f docker-compose-arm.yml up -d